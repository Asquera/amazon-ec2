h2. Amazon Web Services EC2 Ruby Gem

h2. &#x2192; 'amazon-ec2'

h2. About

Amazon Web Services offers a compute power on demand capability known as the Elastic Compute Cloud (EC2).  The server resources in the cloud can be provisioned on demand by making HTTP Query API calls to EC2.
 
This 'amazon-ec2' Ruby Gem is an interface library that can be used to interact with the Amazon EC2 system and control server resources on demand.


h2. Important! : Are you upgrading from an earlier release?

This latest release of the gem has undergone a pretty massive re-write.  It is no longer compatible with code you may have written that made use of an older version of 'amazon-ec2' (< 0.2.0).

Any other gems which depended on 'amazon-ec2' < 0.2.0 will also no longer work with the new release.  The only project I am aware of that depended on earlier versions of 'amazon-ec2' is 'Capazon' which has now been deprecated and reborn as 'Capsize'.  I rewrote the code with the assistance of the creator of Capazon; Jesse Newland.  Feel free to check out "Capsize":http://capsize.rubyforge.org/ to learn more about this exciting new release.

While we apologize for not being able to maintain backward compatibility, there were just too many major enhancements that needed to be made and it just would not have been possible.  I hope that the new robustness and new feature in the latest release make any pain worthwhile!  Of course the old versions are still out there, and can still be installed if you pass the version string into the gem command.  I just don't recommend it unless you really have to.

h2. Installing

This gem follows the standard conventions for installation on any system with Ruby and RubyGems installed.  If you have worked with gems before this will look very familiar.

h3. Installation pre-requisites

h4. "Amazon Web Services developer account":https://aws-portal.amazon.com/gp/aws/developer/registration/index.html.

You'll need an account with AWS in order to use this gem at all.  That should be your first stop on this tour.  Your account must also be enabled for Amazon EC2 usage.  After signup you'll be provided with an 'Access Key ID' and a 'Secret Access Key'.  These allow you to authenticate any API calls you make and ensure correct billing to you for usage of their service.  Take note of these keys (and keep them safe and secret!).

h4. Gem Dependencies

The following gems should be installed automatically as part of your install of amazon-ec2.  Most of them are testing dependencies but they should be painless to install even if you don't plan on running the tests.

"XmlSimple":http://xml-simple.rubyforge.org/  (required)
 
"Mocha":http://mocha.rubyforge.org/  (optional for testing)

"Rcov":http://eigenclass.org/hiki.rb?rcov (optional for testing)

"Test-Spec":http://test-spec.rubyforge.org/test-spec/ (optional for testing)


h3. Installing the gem

Linux / OS X : <pre syntax="ruby">sudo gem install amazon-ec2 --include-dependencies</pre>

Microsoft Windows : <pre syntax="ruby">gem install amazon-ec2 --include-dependencies</pre>


h2. Using the library

h3. The basics...


The library exposes one main interface module <pre syntax="ruby">EC2::Base</pre>

You pass this module method your connection credentials and it will return an object that you can use to make 
method calls directly against EC2.  All the operations for using the EC2 service, including query string header signing,
are handled automatically for you.

We have tried to keep the public methods on 'Base' as close analogues of the EC2 Query API as defined by Amazon Web Services.  
This similarity allows you to reference the Query API Reference in the "EC2 Developer Guide":http://developer.amazonwebservices.com/connect/kbcategory.jspa?categoryID=84. 
In most cases the methods names only differ in how they are presented.  e.g. DescribeImages becomes '@ec2.describe_images() in Ruby.


h3. Example Apps

The best way to become familiar with 'amazon-ec2' is to take it for a test drive.  We have provided two simple ways to do that to get you started.


h4. 'ec2-gem-example.rb' Sample Test App


h4. 'ec2sh' command shell


h3. Use in Ruby scripts


You can take a look at a running sample
<pre syntax="ruby">
#!/usr/bin/env ruby

require 'rubygems'
require 'ec2'

ACCESS_KEY_ID = '--YOUR AWS ACCESS KEY ID--'
SECRET_ACCESS_KEY = '--YOUR AWS SECRET ACCESS KEY--'
  
@ec2 = EC2::Base.new(:access_key_id => ACCESS_KEY_ID, :secret_access_key => SECRET_ACCESS_KEY)
 
puts "----- listing images -----"
ec2.describe_images.each do |image|
  image.members.each do |member|
    puts "#{member} => #{image[member]}" 
  end
end
</pre>

An example Ruby script which exercises the library is provided for use as a starting point in the gem installation.  Consult the file which is installed at :

<pre syntax="ruby">[your amazon-ec2 gem dir]/examples/ec2-example.rb</pre>


h3. Use in Ruby on Rails applications


in config/environment.rb:

<pre syntax="ruby">
# Include Amazon Web Services EC2 gem methods
require 'EC2'
</pre>

in app/controllers/your_controller.rb:
<pre syntax="ruby">
...
ec2 = EC2::Base.new(ACCESS_KEY_ID, SECRET_ACCESS_KEY)
@ec2_images = ec2.describe_images()
  
# Or with some parameters
# (in this case specific owner ID's)
@ec2_images_mine = ec2.describe_images([],["522821470517"],[])
...
</pre>

in app/views/your_view.rhtml:

###########################################################
FIXME FIXME FIXME
###########################################################

Test it out with something like this...

<pre syntax="ruby">
...
<%= debug(@ec2_images) %>
<%= debug(@ec2_images_mine) %>
...
</pre>

Or this...

<pre syntax="ruby">
...
<% @ec2_images.each do |image| %>
  <% image.each_with_index do |value, index| %>
    <%= "#{index} => #{value}" %><br />
  <% end %>
<% end %>
...
</pre>
 
Or even this...
 
<pre syntax="ruby">
...
<table>
  <tr>
    <th>Id</th>
    <th>Location</th>
    <th>Owner</th>
    <th>State</th>
    <th>Public?</th>
  </tr>
  
  <% for ec2_image in @ec2_images %>
    <tr>
      <td><%=h ec2_image[1] %></td>
      <td><%=h ec2_image[2] %></td>
      <td><%=h ec2_image[3] %></td>
      <td><%=h ec2_image[4] %></td>
      <td><%=h ec2_image[5] %></td>
    </tr>
  <% end %>
</table>
...
</pre>


h2. Contributing

We can always use your help!  Do you have Ruby skills?  Do you see a bug or enhancement that you'd like to see fixed?  We would love to have your patches for documentation, test cases, or enhancements.

h2. Project Info

This project is managed as a RubyForge project which you can find at "http://amazon-ec2.rubyforge.org/":http://amazon-ec2.rubyforge.org/ and this is always the best place to find the latest news, report any bugs, submit feature requests, or provide patches.

h2. Learning More

h3. Documentation

Complete RDoc generated documentation can be found at "http://amazon-ec2.rubyforge.org/rdoc/":http://amazon-ec2.rubyforge.org/rdoc/

h3. Websites

"Amazon Web Services Home":http://aws.amazon.com/
"Project Home":http://rubyforge.org/projects/amazon-ec2/
"Downloads":http://rubyforge.org/frs/?group_id=2753
"Browse Code":http://rubyforge.org/scm/?group_id=2753
"Report Bugs":http://rubyforge.org/tracker/?group_id=2753
"Request Features":http://rubyforge.org/tracker/?group_id=2753
"Submit Patches":http://rubyforge.org/tracker/?group_id=2753


h3. Related Projects

"Capsize":http://capsize.rubyforge.org/


h2. Credits

The original sample code for this library was provided by Amazon Web Services, LLC.  Thanks to them for providing all of us with samples that got this started.

Thanks to all the great folks who submitted patches and kept this project rolling.  I would especially like to thank Sean Knapp, Kevin Clark, and Randy Bias.  Your patches and help are much appreciated.
 
Thanks to Dr. Nic Williams and his great 'NewGem' Ruby Gem Generator.  This gem of a Gem helped me package up this code for distribution in a flash!  You can find Dr. Nic's NewGem generator at "http://newgem.rubyforge.org/":http://newgem.rubyforge.org/


h2. Contact

Comments, patches, and bug reports are welcome. Send an email to the address below or use the RubyForge forum for this project.
