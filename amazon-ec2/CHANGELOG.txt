=CHANGELOG.txt : Amazon Elastic Compute Cloud (EC2) Ruby Gem


===0.0.7 (03/02/2007)
* Applied patch from Kevin Clark which does the following:
* New method to the instances.rb to allow for issuing a reboot command to an EC2 instance.
* New Mocha based tests (Mocha test suite must be installed.  'sudo gem install mocha')
* Cleanup of the test directory.


===0.0.6 (03/02/2007)
* Patched instances.rb with a bugfix and patch provided by Randy Bias (Thanks Randy!).
Only minimally tested so please let me know if this causes any problems for anyone.

From his notes:
I wanted to let you know that there appears to be a bug in how user data is passed.  In  
instances.rb the line that creates the base64 encoded package of user data is as follows:

userData = CGI::escape(Base64.encode64(in_params[:userData]).strip())

This may have worked prior, but at least right now the  
CGI::escape appears to cause a breakage.  More specifically it  
turns something like this (the actual base64 encoded string):

YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh
eHh4eHh4eHh4eHh4eHh4eHh4eHgg

  Into this:

YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh% 
0AeHh4eHh4eHh4eHh4eHh4eHh4eHgg

And it looks like EC2 chokes on the %0, which is CGI::escape's  
way for handling an EOL.  Unfortunately, the Base64.encode64 (at  
least in my 1.8.5 version of Ruby) inserts a EOL at every 47 chars,  
no matter what:

---
[randyb@master randyb] cat /tmp/foo.rb
#!/usr/bin/env ruby
#
require 'rubygems'
require_gem 'amazon-ec2'
require 'getoptlong'
puts Base64.encode64 
("012345678901234567890123456789012345678901234567890123456789")

[randyb@master randyb] /tmp/foo.rb
MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0
NTY3ODkwMTIzNDU2Nzg5
---

The best way to handle this is to strip the CRLFs/EOLs before passing to CGI.escape.
 

===0.0.5 (12/21/2006)
* Changes to home page documentation and example files to indicate that you 
  should use 'require_gem' instead of a simple require.  Not sure if this 
  is a result of something I am doing in the packaging of the gem that is 
  incorrect or if this is right and proper.  I will investigate further.
* Patched instances.rb run_instances method to allow for submission of 
  user data with the command to start an instance.  Patch submitted 
  anonymously on RubyForge.  This had not been functionally implemented
  in the Amazon Web Services sample library prior to this patch.
* Added simple framework for adding unit tests for the library under test dir.  
  No functional unit tests exist yet.

===0.0.4 (12/21/2006)
* Applied patch from Kevin Clark to svn version 7.  Thanks for the 
  patch and the description Kevin!  Please report if you 
  encounter any issues with this patched version.  Here is Kevin's 
  description which I requested :  "It helps me to think of modules as boxes full of classes and 
  methods.  REXML is a module which holds various classes related to parsing XML
  including REXML::Node, REXML::Document and REXML::XPath. When you
  include a module it takes everything out of the box and places it in
  the local context.  So, when you include REXML in the global namespace 
  on line 27 of EC2.rb, it includes classes called Node, Document and XPath in the
  global object space. This means that I can't have a class called Node
  in my own project (which I do). The library would be a much better
  neighbor if it instead accessed the REXML::Document and REXML::XPath
  classes explicitly through the module."

===0.0.3 (12/16/2006)
* API CHANGE : Changed method name 'authorize' to 'authorize_security_group_ingress' to ensure consistent 
  naming of Ruby library methods to match AWS EC2 API actions. Alias to 'authorize' for backwards compatibility.
* API CHANGE : Changed method name 'revoke' to 'revoke_security_group_ingress' to ensure consistent 
	naming of Ruby library methods to match AWS EC2 API actions. Alias to 'revoke' for backwards compatibility.
* API CHANGE : Changed method name 'delete_securitygroup' to 'delete_security_group' to ensure consistent 
	naming of Ruby library methods to match AWS EC2 API actions. Alias to 'delete_securitygroup' for backwards compatibility.
* API CHANGE : Changed method name 'describe_securitygroups' to 'describe_security_group' to ensure consistent 
	naming of Ruby library methods to match AWS EC2 API actions. Alias to 'describe_securitygroups' for backwards compatibility.
* API CHANGE : Changed method name 'create_securitygroup' to 'create_security_group' to ensure consistent 
	naming of Ruby library methods to match AWS EC2 API actions. Alias to 'create_securitygroup' for backwards compatibility.
* Added many API rdoc's, some method descriptions copied from Amazon Query API Developer Guide.
* Extracted some parts of the formerly monolithic EC2 library out into separate files for manageability.
* Changed the HTTP 'User-Agent' string used for each request so that we have our own user agent
  to identify this library's calls.  Now set the version # in the user agent string based on the
  master version number for this library which is stored in lib/EC2/version.rb and should only
  be defined in one place.
* Set @http.verify_mode = OpenSSL::SSL::VERIFY_NONE to avoid seeing SSL Cert warning 
  "warning: peer certificate won't be verified in this SSL session". File EC2.rb:96
* Make 'pathlist' utility method a private method (EC2.rb:111).  No reason I can see for this to be exposed.

===0.0.2 (12/14/2006)
* Bugfix in run_instances method.  Method works now.  Patch submitted by Stephen Caudill on AWS forums.  Thanks!

===0.0.1 (12/13/2006)
* Initial release of the Ruby Gem.  This includes the version of the library exactly as provided by 
  Amazon Web Services as example code.  No changes or enhancements to that code were made other than 
  packaging it as a Ruby Gem.
* RubyForge project created.  http://amazon-ec2.rubyforge.org
